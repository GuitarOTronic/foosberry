{
  "manifest": {
    "name": "sass-loader",
    "version": "7.2.0",
    "description": "Sass loader for webpack",
    "author": {
      "name": "J. Tangelder"
    },
    "license": "MIT",
    "main": "lib/loader.js",
    "files": [
      "lib"
    ],
    "scripts": {
      "appveyor:test": "npm test",
      "create-spec": "node test/tools/runCreateSpec.js",
      "lint": "eslint lib test",
      "test": "nyc mocha -R spec -t 10000",
      "test-bootstrap-sass": "webpack-dev-server --config test/bootstrapSass/webpack.config.js --content-base ./test/bootstrapSass",
      "test-source-map": "webpack-dev-server --config test/sourceMap/webpack.config.js --content-base ./test/sourceMap --inline",
      "test-watch": "webpack --config test/watch/webpack.config.js",
      "test-extract-text": "webpack --config test/extractText/webpack.config.js",
      "test-hmr": "webpack-dev-server --config test/hmr/webpack.config.js --content-base ./test/hmr --hot --inline",
      "travis:lint:commits": "commitlint --from=${TRAVIS_BRANCH} --to=${TRAVIS_COMMIT}",
      "travis:lint": "npm run lint && npm run travis:lint:commits",
      "travis:test": "npm run test",
      "travis:coverage": "npm run test",
      "pretest": "npm run create-spec",
      "posttest": "npm run lint",
      "release": "standard-version"
    },
    "dependencies": {
      "clone-deep": "^4.0.1",
      "loader-utils": "^1.0.1",
      "neo-async": "^2.5.0",
      "pify": "^4.0.1",
      "semver": "^5.5.0"
    },
    "devDependencies": {
      "@commitlint/cli": "^7.2.1",
      "@commitlint/config-conventional": "^7.1.2",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "bootstrap-sass": "^3.3.5",
      "css-loader": "^2.0.0",
      "eslint": "^5.10.0",
      "eslint-plugin-import": "^2.14.0",
      "eslint-plugin-jsdoc": "^4.4.3",
      "eslint-plugin-prettier": "^3.0.0",
      "file-loader": "^3.0.1",
      "husky": "^1.2.0",
      "lint-staged": "^8.1.0",
      "mocha": "^6.0.2",
      "mock-require": "^3.0.1",
      "node-sass": "^4.5.0",
      "nyc": "^13.1.0",
      "raw-loader": "^1.0.0",
      "prettier": "^1.15.2",
      "sass": "^1.3.0",
      "should": "^13.2.3",
      "standard-version": "^5.0.2",
      "style-loader": "^0.23.1",
      "webpack": "^4.5.0",
      "webpack-cli": "^3.1.0",
      "webpack-dev-server": "^3.1.4",
      "webpack-merge": "^4.0.0",
      "chokidar": "^2.1.6"
    },
    "engines": {
      "node": ">= 6.9.0"
    },
    "peerDependencies": {
      "webpack": "^3.0.0 || ^4.0.0"
    },
    "keywords": [
      "sass",
      "libsass",
      "webpack",
      "loader"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/sass-loader.git"
    },
    "bugs": {
      "url": "https://github.com/webpack-contrib/sass-loader/issues"
    },
    "homepage": "https://github.com/webpack-contrib/sass-loader",
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "_registry": "npm",
    "_loc": "~/Library/Caches/Yarn/v4/npm-sass-loader-7.2.0-e34115239309d15b2527cb62b5dfefb62a96ff7f/node_modules/sass-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![npm-stats][npm-stats]][npm-url]\n[![deps][deps]][deps-url]\n[![travis][travis]][travis-url]\n[![appveyor][appveyor]][appveyor-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img height=\"100\"\n    src=\"https://worldvectorlogo.com/logos/sass-1.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n  <h1>Sass Loader</h1>\n  <p>Loads a Sass/SCSS file and compiles it to CSS.</p>\n</div>\n\nUse the [css-loader](https://github.com/webpack-contrib/css-loader) or the [raw-loader](https://github.com/webpack-contrib/raw-loader) to turn it into a JS module and the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to extract it into a separate file.\nLooking for the webpack 1 loader? Check out the [archive/webpack-1 branch](https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1).\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm install sass-loader node-sass webpack --save-dev\n```\n\nThe sass-loader requires [webpack](https://github.com/webpack) as a\n[`peerDependency`](https://docs.npmjs.com/files/package.json#peerdependencies)\nand it requires you to install either [Node Sass](https://github.com/sass/node-sass) or [Dart Sass](https://github.com/sass/dart-sass) on your\nown. This allows you to control the versions of all your dependencies, and to\nchoose which Sass implementation to use.\n\n[Node Sass]: https://github.com/sass/node-sass\n[Dart Sass]: http://sass-lang.com/dart-sass\n\n<h2 align=\"center\">Examples</h2>\n\nChain the sass-loader with the [css-loader](https://github.com/webpack-contrib/css-loader) and the [style-loader](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n```bash\nnpm install style-loader css-loader --save-dev\n```\n\n```js\n// webpack.config.js\nmodule.exports = {\n\t...\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [\n                \"style-loader\", // creates style nodes from JS strings\n                \"css-loader\", // translates CSS into CommonJS\n                \"sass-loader\" // compiles Sass to CSS, using Node Sass by default\n            ]\n        }]\n    }\n};\n```\n\nYou can also pass options directly to [Node Sass][] or [Dart Sass][]:\n\n```js\n// webpack.config.js\nmodule.exports = {\n\t...\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [{\n                loader: \"style-loader\"\n            }, {\n                loader: \"css-loader\"\n            }, {\n                loader: \"sass-loader\",\n                options: {\n                    includePaths: [\"absolute/path/a\", \"absolute/path/b\"]\n                }\n            }]\n        }]\n    }\n};\n```\n\nSee [the Node Sass documentation](https://github.com/sass/node-sass/blob/master/README.md#options) for all available Sass options.\n\nBy default the loader resolve the implementation based on your dependencies.\nJust add required implementation to `package.json` \n(`node-sass` or `sass` package) and install dependencies. \n\nExample where the `sass-loader` loader uses the `sass` (`dart-sass`) implementation:\n\n**package.json**\n\n```json\n{\n   \"devDependencies\": {\n      \"sass-loader\": \"*\",\n      \"sass\": \"*\"\n   }\n}\n```\n\nExample where the `sass-loader` loader uses the `node-sass` implementation:\n\n**package.json**\n\n```json\n{\n   \"devDependencies\": {\n      \"sass-loader\": \"*\",\n      \"node-sass\": \"*\"\n   }\n}\n```\n\nBeware the situation \nwhen `node-sass` and `sass` was installed, by default the `sass-loader` \nprefers `node-sass`, to avoid this situation use the `implementation` option. \n\nThe special `implementation` option determines which implementation of Sass to\nuse. It takes either a [Node Sass][] or a [Dart Sass][] module. For example, to\nuse Dart Sass, you'd pass:\n\n```js\n// ...\n    {\n        loader: \"sass-loader\",\n        options: {\n            implementation: require(\"sass\")\n        }\n    }\n// ...\n```\n\nNote that when using Dart Sass, **synchronous compilation is twice as fast as\nasynchronous compilation** by default, due to the overhead of asynchronous\ncallbacks. To avoid this overhead, you can use the\n[`fibers`](https://www.npmjs.com/package/fibers) package to call asynchronous\nimporters from the synchronous code path. To enable this, pass the `Fiber` class\nto the `fiber` option:\n\n```js\n// webpack.config.js\nconst Fiber = require('fibers');\n\nmodule.exports = {\n\t...\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [{\n                loader: \"style-loader\"\n            }, {\n                loader: \"css-loader\"\n            }, {\n                loader: \"sass-loader\",\n                options: {\n                    implementation: require(\"sass\"),\n                    fiber: Fiber\n                }\n            }]\n        }]\n    }\n};\n```\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin). This way your styles are not dependent on JavaScript:\n\n```js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nmodule.exports = {\n\t...\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [\n                // fallback to style-loader in development\n                process.env.NODE_ENV !== 'production' ? 'style-loader' : MiniCssExtractPlugin.loader,\n                \"css-loader\",\n                \"sass-loader\"\n            ]\n        }]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            // Options similar to the same options in webpackOptions.output\n            // both options are optional\n            filename: \"[name].css\",\n            chunkFilename: \"[id].css\"\n        })\n    ]\n};\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### Imports\n\nwebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/concepts/module-resolution/). The sass-loader uses Sass's custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your Sass modules from `node_modules`. Just prepend them with a `~` to tell webpack that this is not a relative import:\n\n```css\n@import \"~bootstrap/dist/css/bootstrap\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home directory. webpack needs to distinguish between `bootstrap` and `~bootstrap` because CSS and Sass files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n### Problems with `url(...)`\n\nSince Sass/[libsass](https://github.com/sass/libsass) does not provide [url rewriting](https://github.com/sass/libsass/issues/532), all linked assets must be relative to the output.\n\n- If you're just generating CSS without passing it to the css-loader, it must be relative to your web root.\n- If you pass the generated CSS on to the css-loader, all urls must be relative to the entry-file (e.g. `main.scss`).\n\nMore likely you will be disrupted by this second issue. It is natural to expect relative references to be resolved against the `.scss` file in which they are specified (like in regular `.css` files). Thankfully there are a two solutions to this problem:\n\n- Add the missing url rewriting using the [resolve-url-loader](https://github.com/bholloway/resolve-url-loader). Place it before the sass-loader in the loader chain.\n- Library authors usually provide a variable to modify the asset path. [bootstrap-sass](https://github.com/twbs/bootstrap-sass) for example has an `$icon-font-path`. Check out [this working bootstrap example](https://github.com/webpack-contrib/sass-loader/tree/master/test/bootstrapSass).\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [extract-loader](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (use this, when using webpack 4 configuration. Works in all use-cases)\n\n### Source maps\n\nTo enable CSS source maps, you'll need to pass the `sourceMap` option to the sass-loader *and* the css-loader. Your `webpack.config.js` should look like this:\n\n```javascript\nmodule.exports = {\n    ...\n    devtool: \"source-map\", // any \"source-map\"-like devtool is possible\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [{\n                loader: \"style-loader\", options: {\n                    sourceMap: true\n                }\n            }, {\n                loader: \"css-loader\", options: {\n                    sourceMap: true\n                }\n            }, {\n                loader: \"sass-loader\", options: {\n                    sourceMap: true\n                }\n            }]\n        }]\n    }\n};\n```\n\nIf you want to edit the original Sass files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). Checkout [test/sourceMap](https://github.com/webpack-contrib/sass-loader/tree/master/test) for a running example.\n\n### Environment variables\n\nIf you want to prepend Sass code before the actual entry file, you can set the `data` option. In this case, the sass-loader will not override the `data` option but just append the entry's content. This is especially useful when some of your Sass variables depend on the environment:\n\n```javascript\n{\n    loader: \"sass-loader\",\n    options: {\n        data: \"$env: \" + process.env.NODE_ENV + \";\"\n    }\n}\n```\n\nThe `data` option supports `Function` notation:\n\n```javascript\n{\n    loader: \"sass-loader\",\n    options: {\n        data: (loaderContext) => {\n          // More information about avalaible options https://webpack.js.org/api/loaders/\n          const { resourcePath, rootContext } = loaderContext;\n          const relativePath = path.relative(rootContext,resourcePath);\n          \n          if (relativePath === \"styles/foo.scss\") {\n             return \"$value: 100px;\"\n          }\n          \n          return \"$value: 200px;\"\n        }\n    }\n}\n```\n\n**Please note:** Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Sass entry files.\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/jhnns\"><img width=\"150\" height=\"150\" src=\"https://avatars0.githubusercontent.com/u/781746?v=3\"></a><br>\n        <a href=\"https://github.com/jhnns\">Johannes Ewald</a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/webpack-contrib\"><img width=\"150\" height=\"150\" src=\"https://avatars1.githubusercontent.com/u/1243901?v=3&s=460\"></a><br>\n        <a href=\"https://github.com/webpack-contrib\">Jorik Tangelder</a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/akiran\"><img width=\"150\" height=\"150\" src=\"https://avatars1.githubusercontent.com/u/3403295?v=3\"></a><br>\n        <a href=\"https://github.com/akiran\">Kiran</a>\n      </td>\n    <tr>\n</table>\n\n\n<h2 align=\"center\">License</h2>\n\n[MIT](http://www.opensource.org/licenses/mit-license.php)\n\n[npm]: https://img.shields.io/npm/v/sass-loader.svg\n[npm-stats]: https://img.shields.io/npm/dm/sass-loader.svg\n[npm-url]: https://npmjs.com/package/sass-loader\n\n[node]: https://img.shields.io/node/v/sass-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack-contrib/sass-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/sass-loader\n\n[travis]: http://img.shields.io/travis/webpack-contrib/sass-loader.svg\n[travis-url]: https://travis-ci.org/webpack-contrib/sass-loader\n\n[appveyor-url]: https://ci.appveyor.com/project/webpack-contrib/sass-loader/branch/master\n[appveyor]: https://ci.appveyor.com/api/projects/status/rqpy1vaovh20ttxs/branch/master?svg=true\n\n[cover]: https://codecov.io/gh/webpack-contrib/sass-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/sass-loader\n\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sass-loader/-/sass-loader-7.2.0.tgz#e34115239309d15b2527cb62b5dfefb62a96ff7f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sass-loader/-/sass-loader-7.2.0.tgz",
    "hash": "e34115239309d15b2527cb62b5dfefb62a96ff7f",
    "integrity": "sha512-h8yUWaWtsbuIiOCgR9fd9c2lRXZ2uG+h8Dzg/AGNj+Hg/3TO8+BBAW9mEP+mh8ei+qBKqSJ0F1FLlYjNBc61OA==",
    "registry": "npm",
    "packageName": "sass-loader"
  },
  "registry": "npm",
  "hash": "e34115239309d15b2527cb62b5dfefb62a96ff7f"
}